To create an email subscription service with a simple admin panel, follow these steps:

Technologies Used

	•	Frontend: HTML, CSS, JavaScript
	•	Backend: Node.js with Express
	•	Database: MongoDB
	•	Email: Nodemailer

Project Structure

email-subscription-service/
├── public/
│   ├── index.html
│   ├── admin.html
│   ├── style.css
│   └── script.js
├── server/
│   ├── models/
│   │   └── Subscriber.js
│   ├── routes/
│   │   ├── admin.js
│   │   └── subscribers.js
│   └── app.js
├── .env
├── package.json
└── README.md

1. Setup Node.js Project

Initialize a new Node.js project and install the required dependencies.

mkdir email-subscription-service
cd email-subscription-service
npm init -y
npm install express mongoose nodemailer dotenv body-parser

2. Create the Server

Create the server/app.js file to set up the Express server.

// server/app.js
const express = require('express');
const mongoose = require('mongoose');
const bodyParser = require('body-parser');
const dotenv = require('dotenv');

dotenv.config();

const app = express();
app.use(bodyParser.json());
app.use(express.static('public'));

mongoose.connect(process.env.MONGO_URI, { useNewUrlParser: true, useUnifiedTopology: true });

const subscribersRouter = require('./routes/subscribers');
const adminRouter = require('./routes/admin');

app.use('/api/subscribers', subscribersRouter);
app.use('/api/admin', adminRouter);

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
    console.log(`Server running on port ${PORT}`);
});

3. Create Subscriber Model

Create a model for storing subscriber information.

// server/models/Subscriber.js
const mongoose = require('mongoose');

const subscriberSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
});

module.exports = mongoose.model('Subscriber', subscriberSchema);

4. Create Routes for Subscribers

Create routes for handling subscription.

// server/routes/subscribers.js
const express = require('express');
const router = express.Router();
const Subscriber = require('../models/Subscriber');

router.post('/', async (req, res) => {
    const { email } = req.body;
    try {
        const subscriber = new Subscriber({ email });
        await subscriber.save();
        res.status(201).send('Subscribed successfully');
    } catch (error) {
        res.status(400).send('Error subscribing');
    }
});

module.exports = router;

5. Create Routes for Admin

Create routes for admin to send emails.

// server/routes/admin.js
const express = require('express');
const router = express.Router();
const nodemailer = require('nodemailer');
const Subscriber = require('../models/Subscriber');

const ADMIN_PASSWORD = 'admin'; // Ideally, store this securely in .env

router.post('/send', async (req, res) => {
    const { password, subject, message } = req.body;
    if (password !== ADMIN_PASSWORD) {
        return res.status(403).send('Invalid password');
    }

    const subscribers = await Subscriber.find({});
    const emails = subscribers.map(subscriber => subscriber.email);

    const transporter = nodemailer.createTransport({
        service: 'gmail',
        auth: {
            user: process.env.EMAIL,
            pass: process.env.EMAIL_PASSWORD,
        },
    });

    const mailOptions = {
        from: process.env.EMAIL,
        to: emails,
        subject,
        text: message,
    };

    transporter.sendMail(mailOptions, (error, info) => {
        if (error) {
            return res.status(500).send('Error sending emails');
        }
        res.status(200).send('Emails sent successfully');
    });
});

module.exports = router;

6. Create the Environment Variables

Create a .env file to store sensitive information.

MONGO_URI=mongodb://localhost:27017/email-subscription
EMAIL=your-email@gmail.com
EMAIL_PASSWORD=your-email-password

7. Create the Frontend

Create a simple HTML frontend with subscription and admin panels.

public/index.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Subscribe</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    <h1>Email Subscription</h1>
    <form id="subscribe-form">
        <input type="email" id="email" placeholder="Your Email" required>
        <button type="submit">Subscribe</button>
    </form>
    <script src="script.js"></script>
</body>
</html>

public/admin.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin Panel</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    <h1>Admin Panel</h1>
    <form id="admin-form">
        <input type="password" id="password" placeholder="Admin Password" required>
        <input type="text" id="subject" placeholder="Email Subject" required>
        <textarea id="message" placeholder="Email Message" required></textarea>
        <button type="submit">Send Emails</button>
    </form>
    <script src="script.js"></script>
</body>
</html>

public/style.css

body {
    font-family: Arial, sans-serif;
    text-align: center;
    margin-top: 50px;
}

form {
    display: inline-block;
    margin-top: 20px;
}

input, textarea {
    display: block;
    margin: 10px auto;
    padding: 10px;
    width: 80%;
    max-width: 300px;
}

button {
    padding: 10px 20px;
    background-color: #4CAF50;
    color: white;
    border: none;
    cursor: pointer;
}

button:hover {
    background-color: #45a049;
}

public/script.js

document.getElementById('subscribe-form').addEventListener('submit', async (e) => {
    e.preventDefault();
    const email = document.getElementById('email').value;

    try {
        const response = await fetch('/api/subscribers', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ email }),
        });
        const result = await response.text();
        alert(result);
    } catch (error) {
        alert('Error subscribing');
    }
});

document.getElementById('admin-form').addEventListener('submit', async (e) => {
    e.preventDefault();
    const password = document.getElementById('password').value;
    const subject = document.getElementById('subject').value;
    const message = document.getElementById('message').value;

    try {
        const response = await fetch('/api/admin/send', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ password, subject, message }),
        });
        const result = await response.text();
        alert(result);
    } catch (error) {
        alert('Error sending emails');
    }
});

8. Run the Server

Start your server using the following command:

node server/app.js

Your email subscription service with a simple admin panel is now ready. Users can subscribe on the main page, and the admin can send emails to all subscribers through the admin panel.
